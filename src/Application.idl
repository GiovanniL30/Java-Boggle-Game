module App {

    struct User {
        string userID;
        string firstName;
        string lastName;
        string userName;
        string password;
    };

    struct Lobby {
        string lobbyId;
        string lobbyStatus;
        string dateCreated;
        string timeCreated;
        User topPlayer;
    };

    struct Response {
        any payload;
        boolean isSuccess;
    };

    enum ClientActions {
        NEW_MESSAGE,
        START_GAME,
        NEW_GAME_ROUND,
        NO_PLAYER_LOBBY
    };

    exception LogInException {
        string errorMessage;
    };

    exception CreateException {
        string errorMessage;
    };

    exception LobbyException {
        string errorMessage;
    };


    typedef sequence<string> Letters;

   interface Controller {
        void receiveUpdates(in ClientActions clientActions);
        void sendUpdates(in ClientActions clientActions);
        void updatePlayerListView();
        void setWaitingTime(in long time);
        void setGameTime(in long time);
        void setRound(in long round);
        void updatePlayerScore(in string id, in long newScore);
        void receiveLetter(in Letters letters);
        void endGameUpdate(in User winner, in long score);
        void stopIdleTime();
        void startIdleTime();
        void setIdleTimeLeft(in string message);
   };

    typedef sequence<Lobby> LobbyList;
    typedef sequence<User> Players;


    interface ApplicationServer {
        User login(in string userName, in string password, in Controller controller) raises(LogInException);
        void logout(in string userID);
        Response createAccount(in User user) raises(CreateException);
        Response createLobby(in User creator, in Controller clientController) raises(LobbyException);
        Response joinLobby(in User user, in string lobbyId, in Controller clientController) raises(LobbyException);
        Response leaveLobby(in string user, in string lobbyId) raises(LobbyException);
        LobbyList getLobbies();
        Players getPlayers(in string lobbyId);
        Response submitWord(in string word, in string playerId, in string lobbyId);
        void startGame(in string lobbyId);
    };

    interface LobbyServer {
       Response createLobby(in User creator, in Controller clientController) raises(LobbyException);
       boolean joinLobby(in User user, in string lobbyId, in Controller clientController) raises(LobbyException);
       Response leaveLobby(in string user, in string lobbyId) raises(LobbyException);
       LobbyList getLobbies();
       Response submitWord(in string word, in string playerId, in string lobbyId);
    };

};
