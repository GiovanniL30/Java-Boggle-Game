module App {

    struct User {
        string userID;
        string firstName;
        string lastName;
        string userName;
        string password;
        boolean isLoggedIn;
        string status;
    };

    struct Lobby {
        string lobbyId;
        string lobbyStatus;
        string dateCreated;
        string timeCreated;
        User topPlayer;
    };

    struct Response {
        any payload;
        boolean isSuccess;
    };

    enum ClientActions {
        NEW_MESSAGE,
        START_GAME
    };



   interface Controller {
        void receiveUpdates(in ClientActions clientActions);
        void sendUpdates(in ClientActions clientActions);
        void updateWaitingLobbyView(in User user);
        void setWaitingTime(in long time);
        void setGameTime(in long time);

   };

    typedef sequence<Lobby> LobbyList;
    typedef sequence<User> Players;

    interface ApplicationServer {
        User login(in string userName, in string password, in Controller controller);
        void logout(in string userID);
        Response createAccount(in User user);
        Response createLobby(in User creator, in Controller clientController);
        Response joinLobby(in User user, in string lobbyId, in Controller clientController);
        Response leaveLobby(in User user, in string lobbyId);
        LobbyList getLobbies();
        Players getPlayers(in string lobbyId);
        Response submitWord(in string word, in string playerId, in string lobbyId);
    };

    interface LobbyServer {
            Response createLobby(in User creator, in Controller clientController);
            boolean joinLobby(in User user, in string lobbyId, in Controller clientController);
            Response leaveLobby(in User user, in string lobbyId);
            LobbyList getLobbies();
            Response submitWord(in string word, in string playerId, in string lobbyId);
    };

};
